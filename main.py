import random
import asyncio
import os
import json
import uuid
from typing import Any
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram import F

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = 'YOUR TG BOT TOKEN'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
current_directory = os.path.dirname(os.path.abspath(__file__))
USER_DATA_FILE = os.path.join(current_directory, 'user_data.json')


SYMBOLS = {
    "–ü–∏–≤–æ": "üç∫",
    "–í–∏–Ω–æ": "üç∑",
    "–°–µ—Ä—Ñ–µ—Ä": "üèÑ",
    "–¢—É–Ω–µ—Ü": "üêü",
    "–û—Å—å–º–∏–Ω–æ–≥": "üêô",
    "–§–ª–∞–≥ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏": "üáµüáπ",
    "–í–ù–ñ": "ü™™",
    "–ß–µ–º–æ–¥–∞–Ω": "üß≥",
    "–û–∫–µ–∞–Ω": "üåä"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not os.path.exists(USER_DATA_FILE):
        # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø—É—Å—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=4)
        return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ñ–∞–π–ª –±—ã–ª –ø—É—Å—Ç—ã–º

    with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def clear_user_data():
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=4)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def unban_users_on_start():
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ."""
    global user_data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    user_data = load_user_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in list(user_data.keys()):
        try:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = user_data[user_id]["chat_id"]
            await bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            del user_data[user_id]  # –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    save_user_data(user_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async def delete_message_if_exists(chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É–¥–∞–ª–µ–Ω–æ.")
    except TelegramForbiddenError:
        print(f"–ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message_id}.")
    except Exception as e:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def getmessage(message: types.Message):
    user_id = message.from_user.id
    print(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}')

    if user_id in user_data:
        print(f'{user_id} –ï–°–¢–¨ –≤ –±–∞–∑–µ')
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
            if user_data[user_id]["question_message_id"] == message.message_id:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except TelegramForbiddenError:
            print("–ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        print(f'{user_id} –Ω–µ—Ç –≤ –±–∞–∑–µ')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def new_chat_member(event: types.ChatMemberUpdated):
    new_member = event.new_chat_member.user
    user_id = new_member.id
    chat_id = event.chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id

    if user_id == bot.id:
        print("–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.")
        return

    if user_id in user_data and user_data[user_id]["status"] == "blocked":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è chat_id
    user_data[user_id] = {
        "status": "pending",
        "correct_answer": None,
        "question_message_id": None,
        "captcha_id": str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–∞–ø—á–∏
        "chat_id": chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞
    }
    save_user_data(user_data)

    correct_item = random.choice(list(SYMBOLS.keys()))
    other_items = random.sample([item for item in SYMBOLS.keys() if item != correct_item], 2)
    options = [correct_item] + other_items
    random.shuffle(options)

    keyboard = InlineKeyboardBuilder()
    for item in options:
        keyboard.button(text=SYMBOLS[item], callback_data=item)
    keyboard.adjust(3)

    if new_member.username:
        mention = f"@{new_member.username}"
    else:
        mention = f'<a href="tg://user?id={user_id}">{new_member.first_name}</a>'

    question_message = await bot.send_message(
        chat_id,
        f"{mention}, –∑–Ω–∞–µ—Ç–µ –ª–∏, —á—Ç–æ:\n{get_random_fact_from_file('portugal.json')}\n\n–ê —Å–µ–π—á–∞—Å –≤—ã–±–µ—Ä–∏—Ç–µ '{correct_item}'. –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã!",
        reply_markup=keyboard.as_markup(),
        parse_mode='HTML'
    )

    user_data[user_id]["correct_answer"] = correct_item
    user_data[user_id]["question_message_id"] = question_message.message_id
    save_user_data(user_data)

    await asyncio.sleep(120)

    if user_data[user_id]["status"] == "pending":
        await ban_user(chat_id, user_id, question_message)
        user_data[user_id]["status"] = "blocked"
        save_user_data(user_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏
async def ban_user(chat_id: int, user_id: int, question_message: types.Message):
    try:
        await bot.ban_chat_member(chat_id, user_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏
        if question_message:
            await delete_message_if_exists(chat_id, question_message.message_id)

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
        await asyncio.sleep(3 * 60 * 60)  # 3 —á–∞—Å–∞
        await bot.unban_chat_member(chat_id, user_id)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É
@dp.callback_query(F.data)
async def process_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    if user_id not in user_data:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞–ø—á–∞! –ò –Ω–µ –≤–∞–º –µ–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å!", show_alert=True)
        return

    if user_data[user_id]["status"] == "blocked":
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å (–ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è)
    if callback.message.message_id != user_data[user_id]["question_message_id"]:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    if callback.data != user_data[user_id]["correct_answer"]:
        await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 3 —á–∞—Å–∞.")
        await ban_user(chat_id, user_id, callback.message)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –≤ `ban_user`
        user_data[user_id]["status"] = "blocked"
        save_user_data(user_data)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        del user_data[user_id]
        save_user_data(user_data)
    else:
        user_data[user_id]["status"] = "approved"
        await callback.answer("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await delete_message_if_exists(chat_id, user_data[user_id]["question_message_id"])

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
        del user_data[user_id]
        save_user_data(user_data)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def get_random_fact_from_file(file_name):
    current_directory = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_directory, file_name)
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            facts = json.load(file)
            if facts:
                return random.choice(facts)
            else:
                print("–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤ –ø—É—Å—Ç–æ–π.")
                return None
    except FileNotFoundError:
        print(f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await unban_users_on_start()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è await

if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ asyncio.run()
